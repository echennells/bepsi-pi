name: Test Spark Payments

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - spark-support
  schedule:
    - cron: '0 */6 * * *'

jobs:
  test-payments:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment: asdfasdf

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Start Spark listener
        env:
          DISABLE_DISCORD: 'true'
          DISABLE_EVM: 'true'
          DISABLE_SOLANA: 'true'
          DISABLE_LIGHTNING: 'true'
          SPARK_VENDING_PINS: '516,517,518,524,525,528'
          SPARK_SUPPORTED_TOKEN_KEYS: 'BepsiToken'
          SPARK_BEPSITOKEN_IDENTIFIER: 'btkn1xecvlqngfwwvw2z38s67rn23r76m2vpkmwavfr9cr6ytzgqufu0ql0a4qk'
          SPARK_BEPSITOKEN_NAME: 'BEPSI'
          SPARK_PIN_516_NAME: 'Coke'
          SPARK_PIN_516_AMOUNT: '1000'
          SPARK_BEPSITOKEN_PIN_516_AMOUNT: '1'
          SPARK_PIN_517_NAME: 'Pepsi'
          SPARK_PIN_517_AMOUNT: '1000'
          SPARK_BEPSITOKEN_PIN_517_AMOUNT: '1'
          SPARK_PIN_518_NAME: 'Sprite'
          SPARK_PIN_518_AMOUNT: '1000'
          SPARK_BEPSITOKEN_PIN_518_AMOUNT: '1'
          SPARK_PIN_524_NAME: 'Beer'
          SPARK_PIN_524_AMOUNT: '2000'
          SPARK_BEPSITOKEN_PIN_524_AMOUNT: '2'
          SPARK_PIN_525_NAME: 'Wine'
          SPARK_PIN_525_AMOUNT: '2000'
          SPARK_BEPSITOKEN_PIN_525_AMOUNT: '2'
          SPARK_PIN_528_NAME: 'Vodka'
          SPARK_PIN_528_AMOUNT: '2000'
          SPARK_BEPSITOKEN_PIN_528_AMOUNT: '2'
          SPARK_PAYMENT_AMOUNT: '1000'
          SPARK_PIN_516_ADDRESS: ${{ secrets.SPARK_PIN_516_ADDRESS }}
          SPARK_PIN_516_MNEMONIC: ${{ secrets.SPARK_PIN_516_MNEMONIC }}
          SPARK_PIN_517_ADDRESS: ${{ secrets.SPARK_PIN_517_ADDRESS }}
          SPARK_PIN_517_MNEMONIC: ${{ secrets.SPARK_PIN_517_MNEMONIC }}
          SPARK_PIN_518_ADDRESS: ${{ secrets.SPARK_PIN_518_ADDRESS }}
          SPARK_PIN_518_MNEMONIC: ${{ secrets.SPARK_PIN_518_MNEMONIC }}
          SPARK_PIN_524_ADDRESS: ${{ secrets.SPARK_PIN_524_ADDRESS }}
          SPARK_PIN_524_MNEMONIC: ${{ secrets.SPARK_PIN_524_MNEMONIC }}
          SPARK_PIN_525_ADDRESS: ${{ secrets.SPARK_PIN_525_ADDRESS }}
          SPARK_PIN_525_MNEMONIC: ${{ secrets.SPARK_PIN_525_MNEMONIC }}
          SPARK_PIN_528_ADDRESS: ${{ secrets.SPARK_PIN_528_ADDRESS }}
          SPARK_PIN_528_MNEMONIC: ${{ secrets.SPARK_PIN_528_MNEMONIC }}
          SPARK_TREASURY_ADDRESS: 'sp1pgss8zk663885kz8ftfexlayqgyfzpj3kjued5vwkz8y9z7646779qy3rk5rpd'
        run: |
          echo "üöÄ Starting Spark payment listener..."
          echo "üìç This will run for 15 minutes to test payments"
          timeout 15m npm start || true

      - name: Sweep remaining funds to treasury
        if: always()
        env:
          SPARK_VENDING_PINS: '516,517,518,524,525,528'
          SPARK_PIN_516_MNEMONIC: ${{ secrets.SPARK_PIN_516_MNEMONIC }}
          SPARK_PIN_517_MNEMONIC: ${{ secrets.SPARK_PIN_517_MNEMONIC }}
          SPARK_PIN_518_MNEMONIC: ${{ secrets.SPARK_PIN_518_MNEMONIC }}
          SPARK_PIN_524_MNEMONIC: ${{ secrets.SPARK_PIN_524_MNEMONIC }}
          SPARK_PIN_525_MNEMONIC: ${{ secrets.SPARK_PIN_525_MNEMONIC }}
          SPARK_PIN_528_MNEMONIC: ${{ secrets.SPARK_PIN_528_MNEMONIC }}
          SPARK_TREASURY_ADDRESS: 'sp1pgss8zk663885kz8ftfexlayqgyfzpj3kjued5vwkz8y9z7646779qy3rk5rpd'
        run: |
          cat > final-sweep.js << 'EOFSCRIPT'
          #!/usr/bin/env node

          async function finalSweep() {
            try {
              const { IssuerSparkWallet } = await import("@buildonspark/issuer-sdk");

              const treasuryAddress = process.env.SPARK_TREASURY_ADDRESS;
              const pins = (process.env.SPARK_VENDING_PINS || '516,517,518,524,525,528').split(',').map(p => parseInt(p.trim()));

              console.log("üßπ Final sweep to treasury...\n");
              console.log(`üìç Treasury: ${treasuryAddress}\n`);

              let totalSats = 0;
              const totalTokens = {};

              for (const pin of pins) {
                const mnemonic = process.env[`SPARK_PIN_${pin}_MNEMONIC`];
                if (!mnemonic) continue;

                console.log(`üì¶ Pin ${pin}:`);

                try {
                  const { wallet } = await IssuerSparkWallet.initialize({
                    mnemonicOrSeed: mnemonic,
                    options: { network: "MAINNET" }
                  });

                  const balance = await wallet.getBalance();
                  const sats = Number(balance.balance);
                  console.log(`   Balance: ${sats} sats`);

                  if (sats > 0) {
                    const result = await wallet.transfer({
                      receiverSparkAddress: treasuryAddress,
                      amountSats: sats
                    });
                    console.log(`   ‚úÖ Swept ${sats} sats - TX: ${result.id}`);
                    totalSats += sats;
                  }

                  if (balance.tokenBalances && balance.tokenBalances.size > 0) {
                    for (const [tokenId, tokenData] of balance.tokenBalances) {
                      const rawAmount = BigInt(tokenData.balance);
                      if (rawAmount > 0n) {
                        const tokenAmount = Number(rawAmount) / Math.pow(10, 6);
                        const result = await wallet.transferTokens({
                          tokenIdentifier: tokenId,
                          tokenAmount: rawAmount,
                          receiverSparkAddress: treasuryAddress
                        });
                        console.log(`   ‚úÖ Swept ${tokenAmount} tokens - TX: ${result}`);
                        totalTokens[tokenId] = (totalTokens[tokenId] || 0) + tokenAmount;
                      }
                    }
                  }
                } catch (error) {
                  console.log(`   ‚ùå Error: ${error.message}`);
                }
                console.log("");
              }

              console.log("‚ïê".repeat(50));
              console.log(`Total Sats Swept: ${totalSats}`);
              if (Object.keys(totalTokens).length > 0) {
                console.log(`Total Tokens Swept:`);
                for (const [tokenId, amount] of Object.entries(totalTokens)) {
                  console.log(`  ${tokenId.slice(0,20)}...: ${amount}`);
                }
              }
              console.log("‚úÖ Final sweep complete!");

            } catch (error) {
              console.error("‚ùå Final sweep failed:", error.message);
              process.exit(1);
            }
          }

          finalSweep();
          EOFSCRIPT

          node final-sweep.js